1. Двойные/одинарные кавычки
Двойные кавычки

Следует использовать тогда, когда вам нужно размещать значения переменных или вывод команд в рамках строк.
Все символы интерпретируются обычным образом, за исключением символов $ и `, 
которые используются для раскрытия переменных и команд соответственно.

Одинарные кавычки

Все символы интерпретируются как строчные символы.

2. слэш и обратный слэш
обратный слэш отменяет свойста специальных символов 
franky ~> date=20021226

franky ~> echo $date
20021226

franky ~> echo \$date
$date

обычный слэш отделяет элементы пути к каталогам и файлам (например /home/bozo/projects/Makefile)

3. Интерпретатор shell
Интерпретатор командной строки, или shell (shell -- оболочка) -- эта та программа, которая принимает команды от пользователя и исполняет их.

К функциям оболочки относятся:

Взаимодействие с пользователем (редактирование командной строки, история команд и т.д.).
Обработка (расширение) шаблонов имен ("*", "?" и т.д.).
Перенаправление ввода/вывода команд.
Управление заданиями.

Кроме того, shell -- это специализированный язык программирования, в котором есть переменные, конструкции while, if, for и т.д., функции и много чего еще.

4. Команды:
mkdir - создает папку






Ответы на вопросы
№2 : echo 'Hello' | echo 'Hello2'
Решение:
echo 'Hello' && echo 'Hello2'
echo '1' ; echo '2'
#3 одинарные, двойные и обратные кавычки
двойные разрешают подстановку переменных
Одиночные кавычки (' '), по своему действию схожи с двойными кавычками, 
но не разрешают внутри себя подстановку переменных, интерпретируя символ "$", 
как обычный символ.
обратные кавычки выводят результат выполнения другой команды
#4 где посмтореть спец символы?
\b удаление пробела
\n перевод на новую строку
\t добавить горизонтальные табуляции
\v добавить вертикальную табуляцию
\r удалить все символы до начала строки
\с убирает перевод на новую строку в конце сообщения
#5 \
обратный слэш включает экранирование следующего символа
обратный слэш отменяет свойста специальных символов 
franky ~> date=20021226

franky ~> echo $date
20021226

franky ~> echo \$date
$date
