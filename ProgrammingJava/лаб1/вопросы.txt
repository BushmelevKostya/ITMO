1) что такое f в cfe?
отправляет выходные файлы в файл Main.jar

2)switchcase 17 java
перечисление значений через запятую, "->"

3)как получить бесконечность
-деление 1.0 / 0.0 (на бесконечно малое число)

4) вывод int a = 2 ^ 100 -> 102 ?
переполнение типов

5) java интерпритируемая или компилируемая, доказать.
Сначала компилятор компилирует Java в файл .class. 
Это файл собственного типа Java. Затем он считывает и выполняет строку из 
файла .class через виртуальную машину (JVM), так что это интерпретируемый язык. 
Java интерпретирует и работает на JVM, и существуют разные JVM для многих различных 
операционных систем, поэтому Java достигла настоящей кроссплатформенности!
JVM - виртуальная машина Java - инструмент, который транслирует байт-код в машинный 
код и интерпретирует его. Так что это и транслятор, и интерпретатор.

6) JIT 
Компилятор Just-In-Time (JIT) является компонентом JRE (Java Runtime Environment), который повышает производительность приложений Java во время выполнения. Это помогает повысить производительность Java-программ путем компиляции байт-кодов в собственный машинный код во время выполнения.

Как работает компилятор JIT
На практике методы не компилируются при первом вызове. Для каждого метода виртуальная машина Java поддерживает счетчик вызовов, который увеличивается каждый раз при вызове метода. JVM интерпретирует метод, пока его счетчик вызовов не превысит порог компиляции Just-In-Time. Поэтому часто используемые методы компилируются вскоре после запуска виртуальной машины Java, а менее используемые методы скомпилируются намного позже или вообще не выполняются. Порог компиляции Just-In-Time помогает быстрому запуску JVM и по-прежнему имеет улучшенную производительность. Порог был тщательно выбран для обеспечения оптимального баланса между временем запуска и долгосрочной эксплуатацией.

Преимущества компилятора Just-In-Time (JIT)
Усовершенствования в технологии компилятора могут повлиять на существующие программы. Напр. Лучший компилятор «C» не поможет вам уже с уже развернутыми ранее программами. Лучший JIT-компилятор улучшит производительность существующих программ. Итак, код Java, который вы написали годы назад, будет работать быстрее сегодня.

Нативные изображения загружаются быстрее, потому что они не имеют много начальных действий и требуют статического количества меньше памяти

Недостатки компилятора Just-In-Time (JIT)
Компилятор Just-In-Time (JIT) повышает уровень непредсказуемости и сложности в Java-программе. Он добавляет еще один уровень, который программисты не понимают и не контролируют.

JIT-компиляторы имеют намного больше накладных расходов на память, поскольку им необходимо загрузить компилятор и интерпретатор в дополнение к библиотекам времени выполнения и скомпилированному коду, который требуется для выполнения компилируемой программы, выполняемой заранее.

Большие приложения обычно выигрывают от компиляции времени ожидания (AOT), а мелкие - вообще нет.

7)JVM, JRE, JDK

JVM (Java Virtual Machine) - Виртуальная машина отвечает за само выполнение кода. Она работает с байткодом (тем, что находится внутри файлов с расширением .class).

JRE (Java Runtime Environment) - окружение, необходимое для запуска Java-программ. Включает в себя стандартную библиотеку. В нее входят, как базовые пакеты lang, util, так и пакеты для работы с различными форматами, базами данных, пользовательским интерфейсом. JVM тоже часть JRE.

JDK (Java Development Kit) - набор программ для разработки. Именно его мы (или редактор) устанавливаем к себе на компьютер, чтобы заниматься разработкой на Java. Он включает в себя JRE, загрузчик кода java, компилятор javac, архиватор jar, генератор документации javadoc и другие утилиты, нужные во время разработки.

8)Jar и MANIFEST.MF

MANIFEST.MF содержит информацию о jar (авторы, версия, дата и т.д.) и самое главное: точку входа “Main-class: <class name>” - указывает на класс с которого java -jar начинает исполнение. 

9)SDK
SDK (software development kit) — набор инструментов для разработки приложений для определенной аппаратной/программной платформы.

10)Ключи в jar
с - создать jar архив
m - включить в архив информацию из манифеста
f - дать архиву имя
e - добавляет точку входа

11)Стек и куча

Стек - память по правилу “last in first out” очищается после выполнения метода
Он заполняется и освобождается по мере вызова и завершения новых методов 
Переменные в стеке существуют до тех пор, пока выполняется метод в котором они были созданы 
Если память стека будет заполнена, Java бросит исключение java.lang.StackOverFlowError 
Доступ к этой области памяти осуществляется быстрее, чем к куче 
Является потокобезопасным, поскольку для каждого потока создается свой отдельный стек
Примитивные типы хранятся в стеке

Куча - это область памяти используется для динамического выделения памяти для объектов и классов JRE во время выполнения. Новые объекты всегда создаются в куче, а ссылки на них хранятся в стеке.
Когда эта область памяти полностью заполняется, Java бросает java.lang.OutOfMemoryError 
Доступ к ней медленнее, чем к стеку 
Эта память, в отличие от стека, автоматически не освобождается. Для сбора неиспользуемых объектов используется сборщик мусора 
В отличие от стека, куча не является потокобезопасной и ее необходимо контролировать, правильно синхронизируя код 

12)var
Начиная с Java 10 у разработчиков появится альтернатива — они могут позволить компилятору вывести тип с помощью var:
Кстати, если вы беспокоитесь о конфликтах с методами и переменными с именем var: не нужно. Технически, var — это не ключевое слово, а зарезервированное имя типа, то есть его можно использовать только в тех местах, где компилятор ожидает имя типа, но во всех остальных местах он является допустимым идентификатором. Это означает, что только классы, называемые var, больше не будут работать, но это не особо частый случай.
13)switch принимает значения 
byte short int string char
14) приведение типов
(byte)
15) классы обертки
16) сборщик мусора
Пока Java-приложение работает, в нем создаются и запускаются новые объекты. В конце концов некоторые объекты перестают быть нужны. Можно сказать, что в любой момент времени память кучи состоит из двух типов объектов.

Живые — эти объекты используются, на них ссылаются откуда-то еще.
Мертвые — эти объекты больше нигде не используются, ссылок на них нет.
Сборщик мусора находит эти неиспользуемые объекты и удаляет их, чтобы освободить память.
17) тернарный оператор
 String securityAnswer = (man.getAge() >= 18) ? "Все в порядке, проходите!" : "Этот фильм не подходит для вашего возраста!";